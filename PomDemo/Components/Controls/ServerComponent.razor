@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

@if (Server != null)
{
	<tr style='background-color: @GetBackgroundColor()'>
		<td>
			@this.Server.Name
		</td>
		<td>
			@this.Server.City
		</td>
		<td style="color:@((this.Server.IsOnline ? "green" : "red"))">
			@(this.Server.IsOnline ? "online" : "offline")
		</td>
		<td >
			@if (this.Server.IsOnline)
			{
				var peopleOnline = new Random().Next(0, 500);

				@($"({peopleOnline} people)")
			}
		</td>
		<td>
			@if (this.Server.IsOnline)
			{
				<button type="button" class="btn btn-outline-danger" onclick="@(() => { this.Server.IsOnline = false; })">Turn Off</button>
			}
			else
			{
				<button type="button" class="btn btn-outline-success" onclick="@(() => { this.Server.IsOnline = true; })">Turn On</button>
			}

			&nbsp;

			<a href="/servers/edit/@this.Server.Id" class="btn btn-link">Edit</a>
		</td>
		<td>
			<EditForm Model="this.Server"
					  FormName="@($"form_DeleteServer_{this.Server.Id}")"
					  OnValidSubmit="@(() => { DeleteServer(this.Server.Id); })">
				<button type="submit" class="btn btn-danger">Delete</button>
			</EditForm>
		</td>
	</tr>
}

@code {
	[Parameter]
	public Server? Server { get; set; }

	[CascadingParameter(Name = "SelectedCity")]
	public string? SelectedCity { get; set; }

	private async Task DeleteServer(int serverId)
	{
		var isConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", "You are about to delete a server. Are you sure?");

		if (isConfirmed)
		{
			ServersRepository.DeleteServer(serverId);
			NavigationManager.NavigateTo("/servers", forceLoad: true);
		}
	}

    private string GetBackgroundColor()
	{
		if (string.IsNullOrEmpty(SelectedCity))
		{
			return "white";
		}

		switch (SelectedCity)
		{
			case "Toronto": return "lightblue";
			case "Montreal": return "lightyellow";
			case "Ottawa": return "lightgreen";
			case "Calgary": return "lightpink";
			case "Halifax": return "lightgray";
			default: return "white";
		}
    }
}
