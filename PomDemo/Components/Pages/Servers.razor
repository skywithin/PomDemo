@page "/servers"

@rendermode InteractiveServer

<h3>Servers</h3>
<br />
<br />

<div class="container-fluid text-center">
	<div class="row w-50">
		@foreach (var city in cities)
		{
			<div class="col">
				<div class='card @(city == selectedCity ? "border-primary" : null)'>
					<img class="card-img-top" src="@($"/images/{city}.png")" alt="@city">
					<div class="card-body">
						<button type="button" class="btn btn-primary" @onclick="@(() => { SelectCity(city); })">@city</button>
					</div>
				</div>
			</div>
		}
	</div>
</div>

<br />

<ul>
	@foreach(var server in servers)
	{
		<li>
			@($"{server.Name} ({server.City}) is {(server.IsOnline ? "online" : "offline")}")
			&nbsp;
			<a href="/servers/edit/@server.Id" class="btn btn-link">Edit</a>
			&nbsp;
			<EditForm
				Model="server"
				FormName="@($"form_DeleteServer_{server.Id}")"
				OnValidSubmit="@(() => { DeleteServer(server.Id); })"
			>
				<button type="submit" class="btn btn-primary">Delete</button>
			</EditForm>
			
		</li>
	}
</ul>

<p>
	<a href="/servers/add" class="btn btn-primary">Add Server</a>
</p>

@code {
	private IEnumerable<string> cities = CitiesRepository.GetCities();
	private IEnumerable<Server> servers = ServersRepository.GetServers();
	private string selectedCity = string.Empty;

	private void DeleteServer(int serverId)
	{
		ServersRepository.DeleteServer(serverId);
	}

	private void SelectCity(string cityName)
	{
		this.selectedCity = cityName;
		this.servers = ServersRepository.GetServersByCity(this.selectedCity);
	}
}
