@page "/servers/edit/{id:int}"

@inject NavigationManager NavigationManager

<h3>Edit Server</h3>
<br />
<br />

@if (server == null)
{
	<p>Not found</p>
}
else
{
	<EditForm Model="server" FormName="form_EditServer" OnValidSubmit="Submit">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<InputNumber @bind-Value="server.Id" hidden />

		<div class="row mb-3">
			<div class="col-2">
				<label class="col-form-label">Name</label>
			</div>
			<div class="col-6">
				<InputText @bind-Value="server.Name" class="form-control" />
			</div>
			<div class="col">
				<ValidationMessage For="() => server.Name" />
			</div>
		</div>

		<div class="row mb-3">
			<div class="col-2">
				<label class="col-form-label">City</label>
			</div>
			<div class="col-6">
				<InputText @bind-Value="server.City" class="form-control" />
			</div>
			<div class="col">
				<ValidationMessage For="() => server.City" />
			</div>
		</div>

		<div class="row mb-3">
			<div class="col-2">
				<label class="col-form-label">Online</label>
			</div>
			<div class="col-6">
				<InputCheckbox @bind-Value="server.IsOnline" class="form-check-input" />
			</div>
		</div>

		<ValidationSummary />
		<br />
		<button type="submit" class="btn btn-primary">Save</button>
		&nbsp;
		<a href="/servers" class="btn btn-primary">Back</a>
	</EditForm>
}

@code {
	[Parameter] public int Id { get; set; }

	[SupplyParameterFromForm(FormName = "form_EditServer")]
	private Server? server { get; set; }

	protected override void OnParametersSet()
	{
		server ??= ServersRepository.GetServerById(this.Id);
	}

	// protected override Task OnAfterRenderAsync(bool firstRender)
	// {
	// 	return base.OnAfterRenderAsync(firstRender);
	// }

	private async Task Submit()
	{
		if (server != null)
		{
			ServersRepository.UpdateServer(server.Id, server);
		}

		NavigationManager.NavigateTo("/servers");
	}
}
