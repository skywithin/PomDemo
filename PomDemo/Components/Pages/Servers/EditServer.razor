@page "/servers/edit/{id:int}"

@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<NavigationLock
	OnBeforeInternalNavigation="OnBeforeInternalNavigation"
	ConfirmExternalNavigation="true"/> @* Requires Router to be in InteractiveServer render mode *@

<h3>Edit Server</h3>
<br />
<br />

@if (server == null)
{
	<p>Not found</p>
}
else
{
	<EditForm Model="server" FormName="form_EditServer" OnValidSubmit="Submit">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<InputNumber @bind-Value="server.Id" hidden />

		<FieldComponent Label="Name">
			<Control>
				<InputText @bind-Value="this.server.Name" class="form-control" />
			</Control>
			<ValidationControl>
				<ValidationMessage For="() => this.server.Name" />
			</ValidationControl>
		</FieldComponent>

		<FieldComponent Label="City">
			<Control>
				<InputText @bind-Value="server.City" class="form-control" />
			</Control>
			<ValidationControl>
				<ValidationMessage For="() => server.City" />
			</ValidationControl>
		</FieldComponent>

		<FieldComponent Label="Online">
			<Control>
				<InputCheckbox @bind-Value="server.IsOnline" class="form-check-input" />
			</Control>
		</FieldComponent>

		<ValidationSummary />

		<br />

		<button type="submit" class="btn btn-primary">Save</button>

		&nbsp;

		<a href="/servers" class="btn btn-primary">Back</a>
	</EditForm>
}

@code {
	[Parameter] public int Id { get; set; }

	[SupplyParameterFromForm(FormName = "form_EditServer")]
	private Server? server { get; set; }

	protected override void OnParametersSet()
	{
		server ??= ServersRepository.GetServerById(this.Id);
	}

	private async Task Submit()
	{
		if (server != null)
		{
			ServersRepository.UpdateServer(server.Id, server);
		}

		NavigationManager.NavigateTo($"/servers/city/{server?.City}");
	}

	private async Task OnBeforeInternalNavigation(LocationChangingContext context)
	{
		var isConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", "You are about to navigate away from this page. Are you sure?");
	
		if (!isConfirmed)
		{
			context.PreventNavigation();
		}
	}
}
